{"version":3,"file":"server.js","mappings":"ubACa,EAAAA,MAAQ,CAAC,EAEtB,W,gwBCHA,eAEA,SACA,SACA,SAEMC,EAAMC,EAAM,WAqBlB,IAAaC,EAAb,MAGI,cACIC,KAAKC,WAAa,IAAIC,EAAO,cAAc,GAAM,EACrD,CAEa,OAAAC,CAAQC,G,+CACjB,IAEI,MAAMC,EAAU,CACZC,MAAOF,EAAIG,KAAKD,MAChBE,SAAUJ,EAAIG,KAAKC,SACnBC,QAASL,EAAIG,KAAKG,YAGtB,aAAa,UAAMC,KACa,QADT,EACnBC,QAAQC,IAAIC,wBAAgB,QAAI,GAChCT,GAECU,MAAKC,IACFC,QAAQpB,IAAI,aAAcmB,GAC1BC,QAAQpB,IAAI,wCAAwCmB,EAASE,UAErC,MAApBF,EAASE,QAAsC,MAApBF,EAASE,QACpClB,KAAKC,WAAWkB,KAAK,gBAAiB,CAClCC,QAAShB,EAAIG,KAAKa,QAClBC,UAAU,EACVC,UAAWlB,EAAIG,KAAKe,UACpBC,KAAMnB,EAAIG,KAAKgB,KACfb,WAAYN,EAAIG,KAAKG,aAItBM,KACRQ,OAAMC,IACL,MAAIA,EAAMT,UACNC,QAAQpB,IAAI,gBAAiB4B,EAAMT,UAEnCC,QAAQpB,IAAI4B,EAAMT,SAASU,MAC3BT,QAAQpB,IAAI4B,EAAMT,SAASE,QAC3BD,QAAQpB,IAAI4B,EAAMT,SAASW,SAErB,IAAIC,MAAM,yBAEhBX,QAAQpB,IAAI,qBAAsB4B,GAE5B,IAAIG,MAAM,uB,IAG9B,MAAOC,GAEL,MADAZ,QAAQpB,IAAI,sBAAuBgC,GAC7B,IAAID,MAAM,sB,KAIjB,IAAAE,CAAK1B,GAER,IACIJ,KAAKC,WAAWkB,KAAK,cAChBnB,KAAKC,WAAW8B,QAAQ,eACpBC,QAAOC,GACGA,EAAEZ,W,CAEvB,MAAOI,GACL,GAAIA,EAAMS,MAAuB,cAAfT,EAAMS,KAEpB,MAAO,GAEX,MAAMT,C,CAIV,OAAQzB,KAAKC,WAAW8B,QAAQ,eAA6CI,KAAI,CAACC,EAAWC,IAClF,IAAIC,SAAc,CAACC,EAASC,KAE/B,MAAMC,EAAO,CACTC,MAAO,mBACPC,KAAM,wCACNC,SAAU,CACN,CACIC,cAAe,OACfC,aAAc,eACdC,cAAe,WAAWnC,QAAQC,IAAImC,kCACtCC,MAAO,CACH,CACIf,KAAM,YACNgB,MAAO,SAEX,CACIhB,KAAM,aACNgB,MAAOd,EAAUb,SAKjC4B,gBAAiB,CAAC,CACd,WAAY,oBACZ,QAAS,aACTjB,KAAM,WACNkB,OAAQ,CAAC,4BAIjBvD,EAAI,mBAAmBuC,EAAU1B,cAEjC,UAAMC,KACF0C,UAAUjB,EAAU1B,YACpB4C,KAAKC,UAAUd,IACjB1B,MAAKC,IACHnB,EAAI,wCAAwCmB,EAASE,UACrDqB,GAAS,IACVf,OAAMgC,IACDA,EAAIxC,UAAoC,MAAxBwC,EAAIxC,SAASE,QAC7BlB,KAAKC,WAAWkB,KAAK,eAAekB,eAAmB,GACvDxC,EAAI,wCAAwC2D,EAAIxC,SAASE,qCACzDqB,MAEA1C,EAAI,qCAAqC2D,KACzChB,EAAOgB,G,GAEb,KAGd,GA5HSzD,EAAkB,GAL9B,EAAA0D,qBACG,yBACA,uBAEH,EAAAC,cAAc,oCACF3D,GAAA,EAAAA,mBAAAA,C,UC3Bb4D,EAAOC,QAAUC,QAAQ,Q,UCAzBF,EAAOC,QAAUC,QAAQ,c,UCAzBF,EAAOC,QAAUC,QAAQ,Q,UCAzBF,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,U,UCAzBF,EAAOC,QAAUC,QAAQ,uB,SCAzBF,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,e,UCAzBF,EAAOC,QAAUC,QAAQ,O,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUI,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,OACf,C,MCtBA,eACA,SACA,SACA,QACA,SACA,SACA,SAGM/D,EAAMC,EAAM,WAElBD,EAAI,sDAGJ,gBAIA,eAGMwE,EAAUC,IACVC,EAAO3D,QAAQC,IAAI0D,MAAQ3D,QAAQC,IAAI2D,MAAQ,KAGrDH,EAAQI,IAAIH,EAAQI,KAAK,CACrBC,OAAQ,CAACvE,EAAKwE,EAAKC,EAAaC,KAC3B1E,EAAY2E,QAAUF,EAAIG,UAAU,KAG7CX,EAAQI,IAAIH,EAAQW,WAAW,CAAEC,UAAU,KAG3Cb,EAAQc,IAAI,QAASC,EAAKC,KAAKC,UAAW,MAG1CjB,EAAQI,IAAIc,EAAO,SAGnBlB,EAAQI,IAAIe,KAGZnB,EAAQI,IAAI,WAAYH,EAAQmB,OAAOL,EAAKC,KAAKC,UAAW,iBAC5DjB,EAAQI,IAAI,UAAWH,EAAQmB,OAAOL,EAAKC,KAAKC,UAAW,gBAI3DjB,EAAQI,IAAI,EAAAiB,iBAAiBC,IAI7BtB,EAAQI,IAAI,EAAAmB,kBAAkB,CAC1BC,KAAMT,EAAKC,KAAKC,UAAW,QAC3BQ,WAAYH,KAIhBtB,EAAQI,IAAI,IAAKH,EAAQmB,OAAOL,EAAKC,KAAKC,UAAW,QAAS,CAC1DjD,MAAO,gBAIXgC,EAAQc,IAAI,OAAQZ,GAGpBwB,EAAKC,aAAa3B,GAAS4B,OAAO1B,GAAM,KACpC1E,EAAI,qBAAqB0E,IAAO,G","sources":["webpack://connector/./src/server/TeamsAppsComponents.ts?6a42","webpack://connector/./src/server/connectorConnector/ConnectorConnector.ts?2b75","webpack://connector/external commonjs \"axios\"?3775","webpack://connector/external commonjs \"compression\"?e0c2","webpack://connector/external commonjs \"debug\"?b525","webpack://connector/external commonjs \"dotenv\"?3fba","webpack://connector/external commonjs \"express\"?c4a6","webpack://connector/external commonjs \"express-msteams-host\"?eac2","webpack://connector/external commonjs \"morgan\"?66c0","webpack://connector/external commonjs \"node-json-db\"?09ba","webpack://connector/external node-commonjs \"http\"?78d4","webpack://connector/external node-commonjs \"path\"?1f34","[]","webpack://connector/./src/server/server.ts?3175"],"sourcesContent":["// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the connectorConnector connector\nexport * from \"./connectorConnector/ConnectorConnector\";\n","import Axios from \"axios\";\nimport { Request } from \"express\";\nimport { ConnectorDeclaration, IConnector, PreventIframe } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport JsonDB = require(\"node-json-db\");\n\nconst log = debug(\"msteams\");\n\n/**\n * The connector data interface\n */\ninterface IConnectorConnectorData {\n    webhookUrl: string;\n    user: string;\n    appType: string;\n    groupName: string;\n    existing: boolean;\n}\n\n/**\n * Implementation of the \"ConnectorConnectorConnector\" Office 365 Connector\n */\n@ConnectorDeclaration(\n    \"/api/connector/connect\",\n    \"/api/connector/ping\"\n)\n@PreventIframe(\"/connectorConnector/config.html\")\nexport class ConnectorConnector implements IConnector {\n    private connectors: any;\n\n    public constructor() {\n        this.connectors = new JsonDB(\"connectors\", true, false);\n    }\n\n    public async Connect(req: any) {\n        try {\n\n            const request = {\n                email: req.body.email,\n                password: req.body.password,\n                webhook: req.body.webhookUrl\n            };\n\n            return await Axios.post(\n                process.env.BACKEND_ENDPOINT ?? \"\",\n                request\n            )\n                .then(response => {\n                    console.log(\"Response: \", response);\n                    console.log(`Response from Connector endpoint is: ${response.status}`);\n\n                    if (response.status === 200 || response.status === 302) {\n                        this.connectors.push(\"/connectors[]\", {\n                            appType: req.body.appType,\n                            existing: true,\n                            groupName: req.body.groupName,\n                            user: req.body.user,\n                            webhookUrl: req.body.webhookUrl\n                        });\n                    }\n\n                    return response;\n                }).catch(error => {\n                    if (error.response) {\n                        console.log(\"axios - catch\", error.response);\n\n                        console.log(error.response.data);\n                        console.log(error.response.status);\n                        console.log(error.response.headers);\n\n                        throw new Error(\"Invalid Credentials\");\n                    } else {\n                        console.log(\"axios - catch-else\", error);\n\n                        throw new Error(\"Invalid Credentials\");\n                    }\n                });\n        } catch (e) {\n            console.log(\"axios - outer-catch\", e);\n            throw new Error(\"Invalid Credentials\");\n        }\n    }\n\n    public Ping(req: Request): Array<Promise<void>> {\n        // clean up connectors marked to be deleted\n        try {\n            this.connectors.push(\"/connectors\",\n                (this.connectors.getData(\"/connectors\") as IConnectorConnectorData[])\n                    .filter(c => {\n                        return c.existing;\n                    }));\n        } catch (error) {\n            if (error.name && error.name === \"DataError\") {\n                // there\"s no registered connectors\n                return [];\n            }\n            throw error;\n        }\n\n        // send pings to all subscribers\n        return (this.connectors.getData(\"/connectors\") as IConnectorConnectorData[]).map((connector, index) => {\n            return new Promise<void>((resolve, reject) => {\n                // TODO: implement adaptive cards when supported\n                const card = {\n                    title: \"Sample Connector\",\n                    text: \"This is a sample Office 365 Connector\",\n                    sections: [\n                        {\n                            activityTitle: \"Ping\",\n                            activityText: \"Sample ping \",\n                            activityImage: `https://${process.env.PUBLIC_HOSTNAME}/assets/icon.png`,\n                            facts: [\n                                {\n                                    name: \"Generator\",\n                                    value: \"teams\"\n                                },\n                                {\n                                    name: \"Created by\",\n                                    value: connector.user\n                                }\n                            ]\n                        }\n                    ],\n                    potentialAction: [{\n                        \"@context\": \"http://schema.org\",\n                        \"@type\": \"ViewAction\",\n                        name: \"Yo Teams\",\n                        target: [\"http://aka.ms/yoteams\"]\n                    }]\n                };\n\n                log(`Sending card to ${connector.webhookUrl}`);\n\n                Axios.post(\n                    decodeURI(connector.webhookUrl),\n                    JSON.stringify(card)\n                ).then(response => {\n                    log(`Response from Connector endpoint is: ${response.status}`);\n                    resolve();\n                }).catch(err => {\n                    if (err.response && err.response.status === 410) {\n                        this.connectors.push(`/connectors[${index}]/existing`, false);\n                        log(`Response from Connector endpoint is: ${err.response.status}, add Connector for removal`);\n                        resolve();\n                    } else {\n                        log(`Error from Connector endpoint is: ${err}`);\n                        reject(err);\n                    }\n                });\n            });\n        });\n    }\n}\n","module.exports = require(\"axios\");","module.exports = require(\"compression\");","module.exports = require(\"debug\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-msteams-host\");","module.exports = require(\"morgan\");","module.exports = require(\"node-json-db\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport * as compression from \"compression\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(\"Initializing Microsoft Teams Express hosted App...\");\n\n// Initialize dotenv, to use .env file settings if existing\nrequire(\"dotenv\").config();\n\n// The import of components has to be done AFTER the dotenv config\n// eslint-disable-next-line import/first\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add compression - uncomment to remove compression\nexpress.use(compression());\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n"],"names":["nonce","log","debug","ConnectorConnector","this","connectors","JsonDB","Connect","req","request","email","body","password","webhook","webhookUrl","post","process","env","BACKEND_ENDPOINT","then","response","console","status","push","appType","existing","groupName","user","catch","error","data","headers","Error","e","Ping","getData","filter","c","name","map","connector","index","Promise","resolve","reject","card","title","text","sections","activityTitle","activityText","activityImage","PUBLIC_HOSTNAME","facts","value","potentialAction","target","decodeURI","JSON","stringify","err","ConnectorDeclaration","PreventIframe","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","express","Express","port","PORT","use","json","verify","res","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","compression","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","http","createServer","listen"],"sourceRoot":""}